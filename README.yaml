---
#
# This is the canonical configuration for the `README.md`
# Run `make readme` to rebuild the `README.md`
#

# Name of this project
name: Terraform AWS S3

# License of this project
license: "APACHE"

# Canonical GitHub repo
github_repo: clouddrove/terraform-aws-s3

# Badges to display
badges:
  - name: "Latest Release"
    image: "https://img.shields.io/github/release/clouddrove/terraform-aws-s3.svg"
    url: "https://github.com/clouddrove/terraform-aws-s3/releases/latest"
  - name: "tfsec"
    image: "https://github.com/clouddrove/terraform-aws-s3/actions/workflows/tfsec.yml/badge.svg"
    url: "https://github.com/clouddrove/terraform-aws-s3/actions/workflows/tfsec.yml"
  - name: "Licence"
    image: "https://img.shields.io/badge/License-APACHE-blue.svg"
    url: "LICENSE.md"
  - name: "Changelog"
    image: "https://img.shields.io/badge/Changelog-blue"
    url: "CHANGELOG.md"

prerequesties:
  - name: Terraform
    url: https://learn.hashicorp.com/terraform/getting-started/install.html
    version: ">= 1.6.6"

providers:
  - name: aws
    url: https://aws.amazon.com/
    version: ">= 5.31.0"

module_dependencies:
  - name: Labels Module
    url: https://github.com/clouddrove/terraform-aws-labels
    description: Provides resource tagging.

description: |-
  Terraform module to create default S3 bucket with logging and encryption type specific features.

# How to use this project
usage: |-
  Here are some examples of how you can use this module in your inventory structure:
  ### complete Bucket
  ```hcl
  module "s3_bucket" {
    source              = "clouddrove/s3/aws"
    version             = "2.0.0"
  
    name        = "bucket-new-version"
    environment = "test"
    label_order = ["name", "environment"]
  
    #acceleration and request payer enable or disable.  
    acceleration_status = true
    request_payer       = "BucketOwner"
    object_lock_enabled = "Enabled"
    # logging of s3 bucket to destination bucket. 
    logging       = true
    target_bucket = module.logging_bucket.id
    target_prefix = "logs"
  
    #encrption on s3 with default encryption and kms encryption . 
    enable_server_side_encryption = true
    enable_kms                    = true
    kms_master_key_id             = module.kms_key.key_arn
  
    #object locking of s3. 
    object_lock_configuration = {
      mode  = "GOVERNANCE"
      days  = 366
      years = null
    }
  
    versioning = true
  
    #cross replicaton of s3 
    cors_rule = [{
      allowed_headers = ["*"],
      allowed_methods = ["PUT", "POST"],
      allowed_origins = ["https://s3-website-test.hashicorp.com"],
      expose_headers  = ["ETag"],
      max_age_seconds = 3000
    }]
  
    #acl grant permission 
    grants = [
      {
        id          = null
        type        = "Group"
        permissions = ["READ", "WRITE"]
        uri         = "http://acs.amazonaws.com/groups/s3/LogDelivery"
      },
    ]
    owner_id = data.aws_canonical_user_id.current.id
  
    #lifecycle rule for s3 
    enable_lifecycle_configuration_rules = true
    lifecycle_configuration_rules = [
      {
        id                                             = "log"
        prefix                                         = null
        enabled                                        = true
        tags                                           = { "temp" : "true" }
        enable_glacier_transition                      = false
        enable_deeparchive_transition                  = false
        enable_standard_ia_transition                  = false
        enable_current_object_expiration               = true
        enable_noncurrent_version_expiration           = true
        abort_incomplete_multipart_upload_days         = null
        noncurrent_version_glacier_transition_days     = 0
        noncurrent_version_deeparchive_transition_days = 0
        noncurrent_version_expiration_days             = 30
        standard_transition_days                       = 0
        glacier_transition_days                        = 0
        deeparchive_transition_days                    = 0
        storage_class                                  = "GLACIER"
        expiration_days                                = 365
      },
      {
        id                                             = "log1"
        prefix                                         = null
        enabled                                        = true
        tags                                           = {}
        enable_glacier_transition                      = false
        enable_deeparchive_transition                  = false
        enable_standard_ia_transition                  = false
        enable_current_object_expiration               = true
        enable_noncurrent_version_expiration           = true
        abort_incomplete_multipart_upload_days         = 1
        noncurrent_version_glacier_transition_days     = 0
        noncurrent_version_deeparchive_transition_days = 0
        storage_class                                  = "DEEP_ARCHIVE"
        noncurrent_version_expiration_days             = 30
        standard_transition_days                       = 0
        glacier_transition_days                        = 0
        deeparchive_transition_days                    = 0
        expiration_days                                = 365
      }
    ]
  
    #static website on s3
    website = {
      index_document = "index.html"
      error_document = "error.html"
      routing_rules = [{
        condition = {
          key_prefix_equals = "docs/"
        },
        redirect = {
          replace_key_prefix_with = "documents/"
        }
        }, {
        condition = {
          http_error_code_returned_equals = 404
          key_prefix_equals               = "archive/"
        },
        redirect = {
          host_name          = "archive.myhost.com"
          http_redirect_code = 301
          protocol           = "https"
          replace_key_with   = "not_found.html"
        }
      }]
     }
  
  }
     data "aws_canonical_user_id" "current" {}
  ```
  
  ### cors_s3 Bucket
  ```hcl
  module "s3_bucket" {
    source                     = "clouddrove/s3/aws"
    version                    = "2.0.0"
  
    name        = "clouddrove-secure-bucket"
    environment = "test"
    label_order = ["name", "environment"]
  
    versioning = true
    acl        = "private"
  
    cors_rule = [{
      allowed_headers = ["*"],
      allowed_methods = ["PUT", "POST"],
      allowed_origins = ["https://s3-website-test.hashicorp.com"],
      expose_headers  = ["ETag"],
      max_age_seconds = 3000
    }]
  }
  ```
  
  ### default-s3 Bucket
  ```hcl
  module "s3_bucket" {
    source                             = "clouddrove/s3/aws"
    version                            = "2.0.0"
  
    name        = "clouddrove-secure-bucket"
    environment = "test"
    label_order = ["name", "environment"]
    versioning  = true
    acl         = "private"
  }
  ```
  
  ### encryption Bucket
  ```hcl
  module "s3_bucket" {
    source                  = "clouddrove/s3/aws"
    version                 = "2.0.0"
  
    name        = "clouddrove-encryption-bucket"
    environment = "test"
    label_order = ["name", "environment"]
  
    versioning                    = true
    acl                           = "private"
    enable_server_side_encryption = true
    enable_kms                    = true
    kms_master_key_id             = module.kms_key.key_arn
  }
  ```
  ### logging encryption bucket Bucket
  ```hcl
  module "s3_bucket" {
    source                              = "clouddrove/s3/aws"
    version                             = "2.0.0"
  
    name        = "clouddrove-logging-encryption-bucket"
    environment = "test"
    label_order = ["name", "environment"]
  
    versioning = true
    acl        = "private"
    enable_server_side_encryption = true
    enable_kms                    = true
    kms_master_key_id             = module.kms_key.key_arn
    logging       = true
    target_bucket = module.logging_bucket.id
    target_prefix = "logs"
    depends_on = [module.logging_bucket]
  }
  ```
  
   ### logging Bucket
  ```hcl
    module "s3_bucket" {
    source              = "clouddrove/s3/aws"
    version             = "2.0.0"

    name        = "clouddrove-logging-bucket"
    environment = "test"
    label_order = ["name", "environment"]
  
    versioning    = true
    acl           = "private"
    logging       = true
    target_bucket = module.logging_bucket.id
    target_prefix = "logs"
    depends_on    = [module.logging_bucket]
  }
  ```
  
  ### s3 replication Bucket
  ```hcl
  module "s3_bucket" {
    source              = "clouddrove/s3/aws"
    version             = "2.0.0"

    name        = "clouddrov-s3-replication"
    environment = "test"
    label_order = ["name", "environment"]
  
    acl                       = "private"
    replication_configuration = {
      role       = aws_iam_role.replication.arn
      versioning = true
      rules      = [
        {
          id                        = "something-with-kms-and-filter"
          status                    = true
          priority                  = 10
          delete_marker_replication = false
          source_selection_criteria = {
            replica_modifications = {
              status = "Enabled"
            }
            sse_kms_encrypted_objects = {
              enabled = true
            }
          }
          filter = {
            prefix = "one"
            tags = {
              ReplicateMe = "Yes"
            }
          }
          destination = {
            bucket             = "arn:aws:s3:::${module.replica_bucket.id}"
            storage_class      = "STANDARD"
            replica_kms_key_id = aws_kms_key.replica.arn
            account_id         = data.aws_caller_identity.current.account_id
            access_control_translation = {
              owner = "Destination"
            }
            replication_time = {
              status  = "Enabled"
              minutes = 15
            }
            metrics = {
              status  = "Enabled"
              minutes = 15
            }
          }
        },
        {
          id                        = "something-with-filter"
          priority                  = 20
          delete_marker_replication = false
          filter = {
            prefix = "two"
            tags = {
              ReplicateMe = "Yes"
            }
          }
          destination = {
            bucket        = "arn:aws:s3:::${module.replica_bucket.id}"
            storage_class = "STANDARD"
          }
        },
        {
          id                        = "everything-with-filter"
          status                    = "Enabled"
          priority                  = 30
          delete_marker_replication = true
          1 = {
            prefix = ""
          }
          destination = {
            bucket        = "arn:aws:s3:::${module.replica_bucket.id}"
            storage_class = "STANDARD"
          }
        },
        {
          id                        = "everything-without-filters"
          status                    = "Enabled"
          delete_marker_replication = true
          destination = {
            bucket        = "arn:aws:s3:::${module.replica_bucket.id}"
            storage_class = "STANDARD"
          }
        },
      ]
    }
  }
  
    resource "aws_iam_role" "replication" {
    name = "s3-bucket-replication-${module.replica_bucket.id}"
  
    assume_role_policy = <<POLICY
    {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Action": "sts:AssumeRole",
          "Principal": {
            "Service": "s3.amazonaws.com"
          },
          "Effect": "Allow",
          "Sid": ""
        }
      ]
    }
    POLICY
  }
  
    resource "aws_iam_policy" "replication" {
    name = "s3-bucket-replication-${module.replica_bucket.id}"
  
    policy = <<POLICY
    {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Action": [
            "s3:GetReplicationConfiguration",
            "s3:ListBucket"
          ],
          "Effect": "Allow",
          "Resource": [
            "arn:aws:s3:::${module.s3_bucket.id}"
          ]
        },
        {
          "Action": [
            "s3:GetObjectVersion",
            "s3:GetObjectVersionAcl"
          ],
          "Effect": "Allow",
          "Resource": [
            "arn:aws:s3:::${module.s3_bucket.id}/*"
          ]
        },
        {
          "Action": [
            "s3:ReplicateObject",
            "s3:ReplicateDelete"
          ],
          "Effect": "Allow",
          "Resource": "arn:aws:s3:::${module.replica_bucket.id}/*"
        }
      ]
    }
    POLICY
  }
  
    resource "aws_iam_policy_attachment" "replication" {
    name       = "s3-bucket-replication-${module.replica_bucket.id}"
    roles      = [aws_iam_role.replication.name]
    policy_arn = aws_iam_policy.replication.arn
  }
  ``` 
  
   ### s3 website Bucket
  ```hcl
  module "s3_bucket" {
    source              = "clouddrove/s3/aws"
    version             = "2.0.0"

    name        = "clouddrove-website-bucket"
    environment = "test"
    label_order = ["name", "environment"]
         
   website       = { 
         
   index_document = "index.html"
   error_document = "error.html"
   routing_rules = [{
   condition = {
    key_prefix_equals = "docs/"
   },
   redirect = {
    replace_key_prefix_with = "documents/"
   }
   }, {
   condition = {
    http_error_code_returned_equals = 404
    key_prefix_equals               = "archive/"
   },
   redirect = {
    host_name          = "archive.myhost.com"
    http_redirect_code = 301
    protocol           = "https"
    replace_key_with   = "not_found.html"
   }
   }]
   }
   
   versioning = true
   acl                                  = "private"
   enable_lifecycle_configuration_rules = true
   lifecycle_configuration_rules = [
   {
   id                                             = "log"
   prefix                                         = null
   enabled                                        = true
   tags                                           = { "temp" : "true" }
   enable_glacier_transition                      = false
   enable_deeparchive_transition                  = false
   enable_standard_ia_transition                  = false
   enable_current_object_expiration               = true
   enable_noncurrent_version_expiration           = true
   abort_incomplete_multipart_upload_days         = null
   noncurrent_version_glacier_transition_days     = 0
   noncurrent_version_deeparchive_transition_days = 0
   noncurrent_version_expiration_days             = 30
   standard_transition_days                       = 0
   glacier_transition_days                        = 0
   deeparchive_transition_days                    = 0
   expiration_days                                = 365
    },
    {
    id                                             = "log1"
    prefix                                         = null
    enabled                                        = true
    tags                                           = {}
    enable_glacier_transition                      = false
    enable_deeparchive_transition                  = false
    enable_standard_ia_transition                  = false
    enable_current_object_expiration               = true
    enable_noncurrent_version_expiration           = true
    abort_incomplete_multipart_upload_days         = 1
    noncurrent_version_glacier_transition_days     = 0
    noncurrent_version_deeparchive_transition_days = 0
    noncurrent_version_expiration_days             = 30
    standard_transition_days                       = 0
    glacier_transition_days                        = 0
    deeparchive_transition_days                    = 0
    expiration_days                                = 365
    }
    ]
     
     attach_public_policy    = true
     bucket_policy           = true ##first time apply it while be false.
     aws_iam_policy_document = data.aws_iam_policy_document.default.json
    }
    
    data "aws_iam_policy_document" "default" {
    version = "2012-10-17"
    statement {
    sid    = "Stmt1447315805704"
    effect = "Allow"
    principals {
    type        = "AWS"
    identifiers = ["*"]
    }
    actions   = ["s3:GetObject"]
    resources = ["${module.s3_bucket.arn}/*"]
    }
    
  }
  ```